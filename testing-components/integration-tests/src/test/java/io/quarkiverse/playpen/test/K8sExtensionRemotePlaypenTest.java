package io.quarkiverse.playpen.test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.startsWith;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIfSystemProperty;

import io.quarkiverse.playpen.kubernetes.crds.PlaypenConfig;
import io.quarkiverse.playpen.test.util.PlaypenUtil;
import io.quarkiverse.playpen.test.util.command.PlaypenMvn;

@EnabledIfSystemProperty(named = "k8s", matches = "true")
public class K8sExtensionRemotePlaypenTest extends BaseK8sTest {
    static String greetingService;

    @BeforeAll
    public static void setService() {
        greetingService = nodeHost + ":30607";

    }

    @Test
    public void testRemotePlaypen() throws Exception {

        String configName = "expose-none-auth-none";
        PlaypenConfig config = createConfig(configName);
        client.resource(config).create();
        Thread.sleep(100);

        try {
            PlaypenUtil.createPlaypen(client, "greeting", configName);

            PlaypenMvn mvn = new PlaypenMvn()
                    .workDir(System.getProperty("user.dir") + "/greeting")
                    .remote().connect("greeting -hijack");
            try {
                String wait = mvn.waitForStdout("Quarkus augmentation completed", "ERROR");
                Assertions.assertEquals("Quarkus augmentation completed", wait, "Failed to start maven");
                System.out.println("Test remote session");
                given()
                        .baseUri("http://" + greetingService)
                        .when().get("/hello")
                        .then()
                        .statusCode(200)
                        .body(startsWith("Local Hello developer"));
            } catch (Exception e) {
                throw e;
            } finally {
                mvn.exit();
                mvn = new PlaypenMvn()
                        .workDir(System.getProperty("user.dir") + "/greeting")
                        .remote().delete("greeting");
            }
        } finally {
            PlaypenUtil.deletePlaypen(client, "greeting");
            client.resource(config).delete();
            Thread.sleep(1000);
        }
    }

}
